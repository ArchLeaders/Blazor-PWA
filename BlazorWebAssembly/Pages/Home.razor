@using Toolbelt.Blazor.SpeechSynthesis
@using Blazored.LocalStorage
@using BlazorCameraStreamer

@page "/"
@inject ILocalStorageService LocalStorage
@inject SpeechSynthesis SpeechSynthesis

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h1">Speech to Text Test</MudText>

<MudPaper Style="padding: 1rem; margin-top: 2rem">
    <MudText Typo="Typo.h3">Custom Implementation</MudText>
    <MudDivider Class="my-6" />
    <SpeechToTextButton Style="margin: 5px" Change="@(text => OnSpeechCaptured(text))" />
</MudPaper>

<MudPaper Style="padding: 1rem; margin-top: 2rem">
    <MudTextField @bind-Value="Text" Label="Voice to Text Output" Variant="Variant.Text" />
</MudPaper>

<MudDivider Class="my-6" />

<MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin: 5px" OnClick="Listen">Listen</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin: 5px" OnClick="Clear">Clear</MudButton>

<MudText Typo="Typo.h1" Class="my-6">Camera Interop</MudText>

<MudContainer MaxWidth="MaxWidth.Medium">
    <CameraStreamer @ref=CameraStreamerReference
                    OnRendered=OnRenderedHandler
                    Width="1920"
                    Height="1080"
                    Style="width: 100%; border-radius: 0.4rem;"
                    Autostart />
</MudContainer>

<MudDivider Class="my-6" />

<MudPaper Style="padding: 1rem">
    <MudGrid>
        <MudItem xs="1">
            <MudButton Class="d-flex align-center justify-center mud-width-full mt-4" Variant="Variant.Outlined" Color="Color.Primary" OnClick="Capture">Capture</MudButton>
        </MudItem>
        <MudItem xs="11">
             <MudSelect Placeholder="[Default]" T="MediaDeviceInfoModel" Label="Camera" AnchorOrigin="Origin.BottomCenter" ValueChanged="CameraChanged" Dense>
                @foreach (var device in _cameras) {
                    <MudSelectItem Value="device" title="@(device.DeviceId)">@(device.Label)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
</MudPaper>


<MudDivider Class="my-6" />

@if (!string.IsNullOrEmpty(_imageData)) {
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudImage Src="@_imageData" Style="width: 100%; border-radius: 0.4rem" />
    </MudContainer>
}
else {
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="15rem" Style="border-radius: 0.4rem" />
    </MudContainer>
}

@code {
    private string Text { get; set; } = string.Empty;
    private CameraStreamer CameraStreamerReference { get; set; } = new();
    private MediaDeviceInfoModel? Camera { get; set; } = null;

    private string? _imageData;
    private MediaDeviceInfoModel[] _cameras = [];

    private int _videoElementId = 0;

    private void OnSpeechCaptured(string text)
    {
        Text += text;
    }

    private async Task Listen()
    {
        await SpeechSynthesis.SpeakAsync(this.Text);
    }

    private void Clear()
    {
        Text = string.Empty;
    }

    private async void OnRenderedHandler()
    {
        if (CameraStreamerReference?.GetCameraAccessAsync() is Task<bool> task && await task) {
            await CameraStreamerReference.ReloadAsync();
            await CameraStreamerReference.GetCurrentFrameAsync();

            _cameras = await CameraStreamerReference.GetCameraDevicesAsync();
        }
    }

    private async void Capture()
    {
        if (CameraStreamerReference != null) {
            _imageData = await CameraStreamerReference.GetCurrentFrameAsync();
        }
    }

    private async Task CameraChanged(MediaDeviceInfoModel value)
    {
        await CameraStreamerReference.ChangeCameraAsync(value.DeviceId);
        await CameraStreamerReference.ReloadAsync();
    }
}
