@using Toolbelt.Blazor.SpeechSynthesis;
@using Blazored.LocalStorage;

@page "/"
@inject ILocalStorageService LocalStorage;
@inject SpeechSynthesis SpeechSynthesis;
@inject ISpeechRecognitionService SpeechRecognition;

<PageTitle>Home</PageTitle>


<h1>Speech to Text Test</h1>

<div>
    <div style="margin-top: 25px">
        <h3>Radzen</h3>
    </div>

    <RadzenSpeechToTextButton Style="margin: 5px" Change="@(text => OnSpeechCaptured(text))" />
</div>

<div>
    <div style="margin-top: 25px">
        <h3>Java Script (Interop)</h3>
    </div>

    <RadzenButton Text="Start" Style="margin: 5px" Click="Start"></RadzenButton>
    <RadzenButton Text="Stop" Style="margin: 5px" Click="Stop"></RadzenButton>
</div>

<div style="margin-top: 25px">
    <textarea style="margin: 5px; border-radius: 3px" @bind="Text"></textarea>
</div>

<RadzenButton Text="Listen" Style="margin: 5px" Click="Listen"></RadzenButton>
<RadzenButton Text="Clear" Style="margin: 5px" Click="Clear"></RadzenButton>

@code {
    private string Text { get; set; } = string.Empty;

    private void OnSpeechCaptured(string text)
    {
        Text += text;
    }

    private async Task Start()
    {
        Text = string.Empty;

        await SpeechRecognition.RecognizeSpeechAsync("US-en", (text) => {
            Text += text;
            return Task.CompletedTask;
        });
    }

    private async Task Stop()
    {
        await SpeechRecognition.CancelSpeechRecognitionAsync(isAborted: false);
    }

    private async Task Listen()
    {
        await SpeechSynthesis.SpeakAsync(this.Text);
    }

    private void Clear()
    {
        Text = string.Empty;
    }
}
