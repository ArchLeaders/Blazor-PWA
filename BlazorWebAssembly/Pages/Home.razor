@using Toolbelt.Blazor.SpeechSynthesis
@using Blazored.LocalStorage
@using BlazorCameraStreamer

@page "/"
@inject ILocalStorageService LocalStorage
@inject SpeechSynthesis SpeechSynthesis
@inject ISpeechRecognitionService SpeechRecognition

<PageTitle>Home</PageTitle>

<div style="margin: 1rem">
    <h1>Speech to Text Test</h1>

    <div>
        <div style="margin-top: 25px">
            <h3>Radzen</h3>
        </div>

        <Radzen.Blazor.RadzenSpeechToTextButton Style="margin: 5px" Change="@(text => OnSpeechCaptured(text))" />
    </div>

    <div>
        <div style="margin-top: 25px">
            <h3>Java Script (Interop)</h3>
        </div>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin: 5px" OnClick="Start">Start</MudButton>
        <MudButton Variant="Variant.Filled" Style="margin: 5px" OnClick="Stop">Stop</MudButton>
    </div>

    <div style="margin: 5px; margin-top: 25px">
        <MudTextField @bind-Value="Text" Label="Voice to Text Output" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin: 5px" OnClick="Listen">Listen</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin: 5px" OnClick="Clear">Clear</MudButton>

    <div style="margin: 5px; margin-top: 25px; justify-items: center; display: flex">
        <CameraStreamer @ref=_cameraStreamerReference
                        OnRendered=OnRenderedHandler
                        Style="width: 90%; border-radius: 3px;"
                        CameraID=@_cameraId
                        Autostart />
    </div>

     <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin: 5px" OnClick="Capture">Capture</MudButton>

    <div style="margin-top: 25px">
        <h3>Capture Result</h3>
    </div>

    @if (!string.IsNullOrEmpty(_imageData)) {
        <div style="margin: 5px">
            <img src=@_imageData style="max-width: 90%; border-radius: 3px" />
        </div>
    }
</div>

 @code {
    private string Text { get; set; } = string.Empty;

    private CameraStreamer _cameraStreamerReference = new();
    private string? _cameraId = null;
    private string? _imageData;

    private void OnSpeechCaptured(string text)
    {
        Text += text;
    }

    private async Task Start()
    {
        Text = string.Empty;

        await SpeechRecognition.RecognizeSpeechAsync("US-en", (text) => {
            Text += text;
            return Task.CompletedTask;
        });
    }

    private async Task Stop()
    {
        await SpeechRecognition.CancelSpeechRecognitionAsync(isAborted: false);
    }

    private async Task Listen()
    {
        await SpeechSynthesis.SpeakAsync(this.Text);
    }

    private void Clear()
    {
        Text = string.Empty;
    }

    private async void OnRenderedHandler()
    {
        if (_cameraStreamerReference?.GetCameraAccessAsync() is Task<bool> task && await task) {
            await _cameraStreamerReference!.ReloadAsync();
        }
    }

    private async void Capture()
    {
        if (_cameraStreamerReference != null) {
            _imageData = await _cameraStreamerReference.GetCurrentFrameAsync();
        }
    }
}
