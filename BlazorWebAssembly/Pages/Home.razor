@using Toolbelt.Blazor.SpeechSynthesis
@using Blazored.LocalStorage
@using BlazorCameraStreamer

@page "/"
@inject ILocalStorageService LocalStorage
@inject SpeechSynthesis SpeechSynthesis

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h1">Speech to Text Test</MudText>

<MudPaper Style="padding: 1rem; margin-top: 2rem">
    <MudText Typo="Typo.h3">Custom Implementation</MudText>
    <MudDivider Class="my-6" />
    <SpeechToTextButton Style="margin: 5px" Change="@(text => OnSpeechCaptured(text))" />
</MudPaper>

<MudPaper Style="padding: 1rem; margin-top: 2rem">
    <MudTextField @bind-Value="Text" Label="Voice to Text Output" Variant="Variant.Text" />
</MudPaper>

<MudDivider Class="my-6" />

<MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin: 5px" OnClick="Listen">Listen</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" Style="margin: 5px" OnClick="Clear">Clear</MudButton>

<MudText Typo="Typo.h1" Class="my-6">Camera Interop</MudText>

<MudContainer MaxWidth="MaxWidth.Medium">
    <CameraStreamer @ref=_cameraStreamerReference
                    OnRendered=OnRenderedHandler
                    Width="1920"
                    Height="1080"
                    Style="width: 100%; border-radius: 0.4rem;"
                    CameraID=@_cameraId
                    Autostart />
</MudContainer>

<MudDivider Class="my-6" />

<MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Capture" Class="my-2">Capture</MudButton>

<MudDivider Class="my-6" />

@if (!string.IsNullOrEmpty(_imageData)) {
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudImage Src="@_imageData" Style="width: 100%; border-radius: 0.4rem" />
    </MudContainer>
}
else {
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="15rem" Style="border-radius: 0.4rem" />
    </MudContainer>
}

 @code {
    private string Text { get; set; } = string.Empty;

    private CameraStreamer _cameraStreamerReference = new();
    private string? _cameraId = null;
    private string? _imageData;

    private void OnSpeechCaptured(string text)
    {
        Text += text;
    }

    private async Task Listen()
    {
        await SpeechSynthesis.SpeakAsync(this.Text);
    }

    private void Clear()
    {
        Text = string.Empty;
    }

    private async void OnRenderedHandler()
    {
        if (_cameraStreamerReference?.GetCameraAccessAsync() is Task<bool> task && await task) {
            await _cameraStreamerReference.ReloadAsync();
            await _cameraStreamerReference.GetCurrentFrameAsync();
        }
    }

    private async void Capture()
    {
        if (_cameraStreamerReference != null) {
            _imageData = await _cameraStreamerReference.GetCurrentFrameAsync();
        }
    }
}
